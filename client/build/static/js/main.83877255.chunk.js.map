{"version":3,"sources":["About.js","Navigation.js","JobModal.js","Job.js","Jobs.js","App.js","serviceWorker.js","index.js"],"names":["About","Navigation","style","display","justifyContent","background","padding","to","Transition","React","forwardRef","props","ref","Slide","direction","JobModal","job","open","handleClose","title","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","company","alt","className","src","company_logo","DialogContent","DialogContentText","dangerouslySetInnerHTML","__html","description","DialogActions","Button","onClick","color","href","url","target","rel","Job","Paper","Typography","variant","location","created_at","split","slice","join","Jobs","jobs","numJobs","length","numPages","Math","ceil","useState","activeStep","setActiveStep","jobsOnPage","setOpen","selectedJob","selectJob","console","log","component","map","i","key","MobileStepper","steps","position","nextButton","size","prevActiveStep","disabled","backButton","updateCb","a","fetch","res","json","App","jobList","updateJobs","useEffect","fetchJobs","Boolean","window","hostname","match","ReactDOM","render","StrictMode","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.83877255.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      ABOUT ROUTE\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <div style={{display: \"flex\", justifyContent: \"space-around\", background: \"#d4d4d4\", padding: \"10px 0\"}}>\r\n      <NavLink to=\"/\">Home</NavLink>\r\n      <NavLink to=\"/about\">About</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n","import React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function JobModal({job, open, handleClose}) {\r\n\r\n  if(!job.title){\r\n    return <div />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-slide-title\">\r\n          {job.title} -\r\n          {job.company}\r\n          <img alt=\"\" className=\"detail-logo\" src={job.company_logo} />\r\n        </DialogTitle>\r\n\r\n        <DialogContent>\r\n          <DialogContentText \r\n            id=\"alert-dialog-slide-description\" \r\n            dangerouslySetInnerHTML={{__html: job.description}}\r\n          />\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Disagree\r\n          </Button>\r\n\r\n          <a href={job.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <Button color=\"primary\">\r\n              Apply\r\n            </Button>\r\n          </a>\r\n\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\nconst Job = ({ job, onClick }) => {\r\n  \r\n  return (\r\n    <Paper onClick={onClick} className=\"job\">\r\n      <div>\r\n        <Typography variant=\"h6\">{job.title}</Typography>\r\n        <Typography variant=\"h5\">{job.company}</Typography>\r\n        <Typography>{job.location}</Typography>\r\n      </div>\r\n      <div>\r\n        <Typography>{job.created_at.split(' ').slice(0,3).join(' ')}</Typography>\r\n      </div>\r\n    </Paper>\r\n  )\r\n}\r\n\r\nexport default Job\r\n","import React from 'react';\r\nimport JobModal from './JobModal';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Button from '@material-ui/core/Button';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\n\r\nimport Job from './Job';\r\n\r\nconst Jobs = ({ jobs }) => {\r\n\r\n  // pagination\r\n  const numJobs = jobs.length;\r\n  const numPages = Math.ceil(numJobs / 50);\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  \r\n  const jobsOnPage = jobs.slice(activeStep * 50, (activeStep * 50) + 50);\r\n  // step === 0, show 0-49\r\n  // step === 1, show 50-99\r\n  \r\n  const handleNext = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  // modal\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedJob, selectJob] = React.useState({});\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n\r\n  console.log('job is ', jobs[0]);\r\n\r\n  return (\r\n    <div className=\"jobs\">\r\n      <JobModal open={open} job={selectedJob} handleClose={handleClose} />\r\n      <Typography variant=\"h4\" component=\"h1\">    {/* SEO WILL SEE H1 */}\r\n        Entry level Software jobs\r\n      </Typography>\r\n      <Typography variant=\"h6\" component=\"h1\">\r\n        Found {numJobs} jobs\r\n      </Typography>\r\n      {\r\n        jobsOnPage.map( (job, i) => <Job key={i} job={job} onClick={() => {\r\n          handleClickOpen();\r\n          selectJob(job) \r\n        }}/> )\r\n      }\r\n\r\n      <div>\r\n        Page {activeStep + 1} of {numPages}\r\n      </div>\r\n\r\n      <MobileStepper\r\n        variant=\"progress\"\r\n        steps={numPages}\r\n        position=\"static\"\r\n        activeStep={activeStep}\r\n        nextButton={\r\n          <Button size=\"small\" onClick={handleNext} disabled={activeStep === 5}>\r\n            Next\r\n            <KeyboardArrowRight />\r\n          </Button>\r\n        }\r\n        backButton={\r\n          <Button size=\"small\" onClick={handleBack} disabled={activeStep === 0}>\r\n            <KeyboardArrowLeft />\r\n            Back\r\n          </Button>\r\n        }\r\n      />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Jobs\r\n","import React from 'react';\nimport './App.css';\nimport Jobs from './Jobs';\n\nconst JOB_API_URL = \"/api/jobs\";\n\n// API\n// const mockJobs = [\n//   {\n//     title: 'SWE 1', company: 'Google'\n//   },\n//   {\n//     title: 'SWE 2', company: 'Apple'\n//   },\n//   {\n//     title: 'SWE 3', company: 'Facebook'\n//   }\n// ]\n\n// fetch jobs from api\nasync function fetchJobs(updateCb){\n  // browser version of fetch, its built-into the browser\n  const res = await fetch(JOB_API_URL);\n  const json = await res.json();\n\n  updateCb(json); // updateJobs from useState\n\n  console.log({json});\n}\n\n\nfunction App() {\n  const [jobList, updateJobs] = React.useState([]);\n\n\n  // useeffect takes anonymous function in which we can do:\n  // some function calls\n  // laso has second argument which is for hooks we want to watch for update, if its empty, fires once (like componentdidmount)\n  React.useEffect(()=>{\n    fetchJobs(updateJobs);\n  }, [])\n  \n  return (\n      <div className=\"App\">\n        <Jobs jobs={jobList} />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport About from './About';\nimport Navigation from './Navigation';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Navigation />\n\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/about\" component={About} />\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}